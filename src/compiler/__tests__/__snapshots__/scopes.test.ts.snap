// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`scope test Array pattern 1`] = `
"var oi_1 = require(\\"oi\\");
function one(props) {
  const [foo] = props;
  console.log(foo);
}
console.log(oi_1.default);
"
`;

exports[`scope test Object pattern 1`] = `
"var oi_1 = require(\\"oi\\");
function one(props) {
  const {foo} = props;
  console.log(foo);
}
console.log(oi_1.default);
"
`;

exports[`scope test Object pattern with spread 1`] = `
"var oi_1 = require(\\"oi\\");
function one(props) {
  const {foo, ...rest} = props;
  console.log(foo);
}
console.log(oi_1.default);
"
`;

exports[`scope test Object respect spread in Array 1`] = `
"function one(props) {
  const [foo, ...rest] = props;
  console.log(rest);
}
"
`;

exports[`scope test Object respect spread in Object 1`] = `
"function one(props) {
  const {foo, ...rest} = props;
  console.log(rest);
}
"
`;

exports[`scope test option 1 1`] = `
"function hey() {}
"
`;

exports[`scope test option 2 1`] = `
"function hey() {}
console.log(hey);
"
`;

exports[`scope test should work with nulll 1`] = `
"function one(props) {
  const [, foo, ...rest] = props;
  console.log(rest);
}
"
`;

exports[`scope test variation 3 1`] = `
"function foo(hey) {}
"
`;

exports[`scope test variation 4 1`] = `
"const hey = hey => {};
"
`;

exports[`scope test variation 5 1`] = `
"const hey = hey => {
  console.log(hey);
};
"
`;

exports[`scope test variation 6 1`] = `
"var oi_1 = require(\\"oi\\");
console.log(oi_1.hey);
const hey = hey => {
  console.log(hey);
};
"
`;

exports[`scope test variation 7 1`] = `
"class Hey {
  foo(hey) {
    console.log(hey);
  }
}
"
`;

exports[`scope test variation compute properties 1`] = `
"exports.a = () => {};
const b = {
  [exports.a]: 1
};
"
`;

exports[`scope test variation normal prop 1`] = `
"exports.a = () => {};
const b = {
  a: exports.a
};
"
`;

exports[`scope test variation with arrow expression 1`] = `
"exports.a = () => {};
console.log(() => exports.a);
"
`;

exports[`scope test variation with class After 1`] = `
"var oi_1 = require(\\"oi\\");
console.log(oi_1.Hey);
class Hey {
  foo(hey) {
    console.log(hey);
  }
}
new Hey();
"
`;
